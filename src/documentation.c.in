/**
 * @ingroup location
 *
 * @brief Locate nearest point on an element
 *
 * Locate the nearest point on an element using the iterative
 * algorithm of Li X, Wu Z, Pan F et al. A geometric strategy
 * algorithm for orthogonal projection onto a parametric
 * surface. https://dx.doi.org/10.1007/s11390-019-1967-z
 *
 * @param xe element node coordinates;
 * @param xstr stride between \f$x\f$ coordinates of element nodes;
 * @param ne number of element nodes;
 * @param xf field point;
 * @param sn on exit reference element coordinate of nearest point;
 * @param tn on exit reference element coordinate of nearest point;
 * @param p1 physical location of nearest point;
 * @param tol tolerance for iteration;
 * @param nimax maximum number of iterations;
 * @param kn curvature at nearest point.
 *
 * @return number of iterations
 **/

gint SQT_FUNCTION_NAME(sqt_element_nearest_point)(SQT_REAL *xe, gint xstr,
						  gint ne,
						  SQT_REAL *xf, 
						  SQT_REAL *sn, SQT_REAL *tn, 
						  SQT_REAL *p1, SQT_REAL tol,
						  gint nimax, SQT_REAL *kn) ;

/**
 * @ingroup base
 *
 * @brief Shape function evaluations for three-dimensional elements
 * 
 * On entry \a L may not be NULL, but if \a dLds is NULL, first and
 * second derivatives are not evaluated. If \a dLdss is NULL, first
 * derivatives are evaluated, but not second.
 * 
 * @param ne number of nodes on element (currently 3 or 6);
 * @param s coordinate on element;
 * @param t coordinate on element;
 * @param L on exit shape function evaluated at each node;
 * @param dLds on exit \f$\partial L_{i}/\partial s\f$ at each node;
 * @param dLdt on exit \f$\partial L_{i}/\partial t\f$ at each node;
 * @param dLdss on exit \f$\partial^{2} L_{i}/\partial s^{2}\f$ at each node;
 * @param dLdst on exit \f$\partial^{2} L_{i}/\partial s\partial t\f$ 
 * at each node;
 * @param dLdtt on exit \f$\partial^{2} L_{i}/\partial t^{2}\f$ at each node;
 *
 * @return 0 on success.
 * 
 **/

gint SQT_FUNCTION_NAME(sqt_element_shape_3d)(gint ne, SQT_REAL s, SQT_REAL t,
					     SQT_REAL *L,
					     SQT_REAL *dLds, SQT_REAL *dLdt,
					     SQT_REAL *dLdss, SQT_REAL *dLdst,
					     SQT_REAL *dLdtt) ;

/**
 * @ingroup base
 *
 * @brief Interpolation of point on element using shape functions
 * 
 * @param xe element node coordinates;
 * @param xstr stride between \f$x\f$ coordinates of element nodes;
 * @param ne number of element nodes;
 * @param L shape function from ::SQT_FUNCTION_NAME(sqt_element_shape_3d)(...);
 * @param dLds derivative of shape function;
 * @param dLdt derivative of shape function;
 * @param y on exit interpolated point on element;
 * @param n on exit normal at \a y;
 * @param J on exit Jacobian at \a y;
 * 
 * @return 0 on success.
 *
 **/

gint SQT_FUNCTION_NAME(sqt_element_point_interp_3d)(SQT_REAL *xe,
						    gint xstr, gint ne,
						    SQT_REAL *L,
						    SQT_REAL *dLds,
						    SQT_REAL *dLdt,
						    SQT_REAL *y,
						    SQT_REAL *n,
						    SQT_REAL *J) ;

/**
 * @ingroup base
 *
 * @brief Convenience function for direct evaluation of point position
 * on element
 * 
 * @param xe element node coordinates;
 * @param xstr stride between \f$x\f$ coordinates of element nodes;
 * @param ne number of element nodes;
 * @param s coordinate on element;
 * @param t coordinate on element;
 * @param y on exit interpolated point on element;
 * @param n on exit normal at \a y;
 * @param J on exit Jacobian at \a y;
 * 
 * @return 0 on success.
 * 
 **/

gint SQT_FUNCTION_NAME(sqt_element_point_3d)(SQT_REAL *xe, gint xstr, gint ne,
					     SQT_REAL s, SQT_REAL t,
					     SQT_REAL *y, SQT_REAL *n,
					     SQT_REAL *J) ;

/**
 * @ingroup base
 *
 * @brief Estimate surface area of element
 * 
 * @param xe element node coordinates;
 * @param xstr stride between \f$x\f$ coordinates of element nodes;
 * @param ne number of element nodes;
 * @param qrule nodes and weights of quadrature rule;
 * @param nq number of nodes in \a qrule.
 * 
 * @return estimate of area of element.
 * 
 **/

SQT_REAL SQT_FUNCTION_NAME(sqt_element_area)(SQT_REAL *xe, gint xstr, gint ne,
					     SQT_REAL *qrule, gint nq) ;




/**
 * @ingroup base
 *
 * @brief Curvatures on a triangular element
 * 
 * @param xe element node coordinates;
 * @param xstr stride between \f$x\f$ coordinates of element nodes;
 * @param ne number of element nodes;
 * @param s coordinate on reference element;
 * @param t coordinate on reference element;
 * @param kg on exit Gaussian curvature on element in physical space at 
 * \f$(s,t)\f$;
 * @param km on exit mean curvature on element in physical space at
 * \f$(s,t)\f$.
 * 
 * @return 0 on success.
 * 
 **/

gint SQT_FUNCTION_NAME(sqt_triangle_curvature)(SQT_REAL *xe, gint xstr, gint ne,
					       SQT_REAL s, SQT_REAL t,
					       SQT_REAL *kg, SQT_REAL *km) ;

/**
 * @ingroup util
 *
 * @brief Convert Cartesian to spherical coordinates
 * 
 * @param x0 centre of coordinate system;
 * @param x point;
 * @param r radius of \a x in spherical system centred on \a x0;
 * @param th azimuth of \a x in spherical system centred on \a x0;
 * @param ph elevation of \a x in spherical system centred on \a x0.
 * 
 * @return 0 on success.
 * 
 **/

gint SQT_FUNCTION_NAME(sqt_cartesian_to_spherical)(SQT_REAL *x0,
						   SQT_REAL *x,
						   SQT_REAL *r,
						   SQT_REAL *th,
						   SQT_REAL *ph) ;

/**
 * @ingroup laplace
 *
 * @brief Calculating weights for evaluation of Laplace potentials from
 * triangular element using standard quadrature
 * 
 * @param xe element nodes as three packed real numbers
 * @param xstr stride between nodes
 * @param ne number of nodes 
 * @param q nodes and weights of a triangular quadrature rule
 * @param nq number of nodes in \a q
 * @param Kq Koornwinder interpolation matrix from 
 * SQT_FUNCTION_NAME(sqt_koornwinder_interp_matrix)(...)
 * @param nqk number of Koornwinder interpolation nodes
 * @param nK maximum order of Koornwinder polynomial
 * @param x field point
 * @param w on exit contains weights for Laplace potentials at \a x
 * 
 * @return 0 on success.
 * 
 **/

gint SQT_FUNCTION_NAME(sqt_laplace_weights_tri_basic)(SQT_REAL *xe,
						      gint xstr, gint ne,
						      SQT_REAL *q, gint nq,
						      SQT_REAL *Kq,
						      gint nqk,
						      gint nK,
						      SQT_REAL *x,
						      SQT_REAL *w) ;
/**
 * @ingroup helmholtz
 *
 * @brief Calculating weights for evaluation of Helmholtz potentials from
 * triangular element using standard quadrature
 * 
 * @param k wavenumber
 * @param xe element nodes as three packed real numbers
 * @param xstr stride between nodes
 * @param ne number of nodes 
 * @param q nodes and weights of a triangular quadrature rule
 * @param nq number of nodes in \a q
 * @param Kq Koornwinder interpolation matrix from 
 * SQT_FUNCTION_NAME(sqt_koornwinder_interp_matrix)(...)
 * @param nqk number of Koornwinder interpolation nodes
 * @param nK maximum order of Koornwinder polynomial
 * @param x field point
 * @param w on exit contains weights for Laplace potentials at \a x
 * 
 * @return 0 on success.
 * 
 **/

gint SQT_FUNCTION_NAME(sqt_helmholtz_weights_tri_basic)(SQT_REAL k,
							SQT_REAL *xe,
							gint xstr, gint ne,
							SQT_REAL *q, gint nq,
							SQT_REAL *Kq,
							gint nqk,
							gint nK,
							SQT_REAL *x,
							SQT_REAL *w) ;


/**
 * @ingroup laplace
 *
 * @brief Calculating weights for evaluation of Laplace potential from
 * triangular element using adaptive quadrature
 *
 * 
 * @param xe element nodes as three packed real numbers
 * @param xstr stride between nodes
 * @param ne number of nodes 
 * @param q nodes and weights of a triangular quadrature rule
 * @param nq number of nodes in \a q
 * @param Kq Koornwinder interpolation matrix from 
 * SQT_FUNCTION_NAME(sqt_koornwinder_interp_matrix)(...)
 * @param nqk number of Koornwinder interpolation nodes
 * @param nK maximum order of Koornwinder polynomial
 * @param tol convergence tolerance for adaptive quadrature
 * @param dmax maximum recursion depth for adaptive quadrature
 * @param x field point
 * @param w on exit contains weights for Laplace potential at \a x
 * 
 * @return 0 on success.
 * 
 **/

gint SQT_FUNCTION_NAME(sqt_laplace_weights_tri_adaptive)(SQT_REAL *xe,
							 gint xstr, gint ne,
							 SQT_REAL *q, gint nq,
							 SQT_REAL *Kq,
							 gint nqk,
							 gint nK,
							 SQT_REAL tol,
							 gint dmax,
							 SQT_REAL *x,
							 SQT_REAL *w) ;

/**
 * @ingroup helmholtz
 *
 * @brief Calculating weights for evaluation of Helmholtz potentials from
 * triangular element using adaptive quadrature
 *
 * @param k wavenumber
 * @param xe element nodes as three packed real numbers
 * @param xstr stride between nodes
 * @param ne number of nodes 
 * @param q nodes and weights of a triangular quadrature rule
 * @param nq number of nodes in \a q
 * @param Kq Koornwinder interpolation matrix from 
 * SQT_FUNCTION_NAME(sqt_koornwinder_interp_matrix)(...)
 * @param nqk number of Koornwinder interpolation nodes
 * @param nK maximum order of Koornwinder polynomial
 * @param tol convergence tolerance for adaptive quadrature
 * @param dmax maximum recursion depth for adaptive quadrature
 * @param x field point
 * @param w on exit contains weights for Laplace potential at \a x
 * 
 * @return 0 on success.
 * 
 **/

gint SQT_FUNCTION_NAME(sqt_helmholtz_weights_tri_adaptive)(SQT_REAL k,
							   SQT_REAL *xe,
							   gint xstr, gint ne,
							   SQT_REAL *q, gint nq,
							   SQT_REAL *Kq,
							   gint nqk,
							   gint nK,
							   SQT_REAL tol,
							   gint dmax,
							   SQT_REAL *x,
							   SQT_REAL *w) ;

/**
 * @ingroup laplace
 *
 * @brief Calculating weights for evaluation of self-induced Laplace
 * potential on triangular element using singular quadrature
 *
 * 
 * @param xe element nodes as three packed real numbers
 * @param xstr stride between nodes
 * @param ne number of nodes 
 * @param Kq Koornwinder interpolation matrix from 
 * SQT_FUNCTION_NAME(sqt_koornwinder_interp_matrix)(...)
 * @param nqk number of Koornwinder interpolation nodes
 * @param nK maximum order of Koornwinder polynomial
 * @param N order of integration rules
 * @param s0 local coordinate of evaluation point on \a xe
 * @param t0 local coordinate of evaluation point on \a xe
 * @param w on exit contains weights for Laplace potential at \a x
 * 
 * @return 0 on success.
 * 
 **/

gint SQT_FUNCTION_NAME(sqt_laplace_weights_tri_singular)(SQT_REAL *xe,
							 gint xstr, gint ne,
							 SQT_REAL *Kq,
							 gint nqk,
							 gint nK,
							 gint N,
							 SQT_REAL s0,
							 SQT_REAL t0,
							 SQT_REAL *w) ;

/**
 * @ingroup helmholtz
 *
 * @brief Calculating weights for evaluation of self-induced Helmholtz
 * potentials on triangular element using singular quadrature
 * 
 * @param k wavenumber
 * @param xe element nodes as three packed real numbers
 * @param xstr stride between nodes
 * @param ne number of nodes 
 * @param Kq Koornwinder interpolation matrix from 
 * SQT_FUNCTION_NAME(sqt_koornwinder_interp_matrix)(...)
 * @param nqk number of Koornwinder interpolation nodes
 * @param nK maximum order of Koornwinder polynomial
 * @param N order of integration rules
 * @param s0 local coordinate of evaluation point on \a xe
 * @param t0 local coordinate of evaluation point on \a xe
 * @param w on exit contains weights for Helmholtz potentials at \a x
 * 
 * @return 0 on success.
 * 
 **/

gint SQT_FUNCTION_NAME(sqt_helmholtz_weights_tri_singular)(SQT_REAL k,
							   SQT_REAL *xe,
							 gint xstr, gint ne,
							 SQT_REAL *Kq,
							 gint nqk,
							 gint nK,
							 gint N,
							 SQT_REAL s0,
							 SQT_REAL t0,
							 SQT_REAL *w) ;

/**
 * @ingroup laplace
 *
 * @brief Calculating weights for evaluation of Laplace potential on
 * target triangular element from source triangular element using
 * standard quadrature
 * 
 * @param xse source element nodes as three packed real numbers
 * @param xsstr stride between source element nodes
 * @param nse number of source element nodes 
 * @param q nodes and weights of a triangular quadrature rule
 * @param nq number of nodes in \a q
 * @param Kq Koornwinder interpolation matrix for \a xse from 
 * SQT_FUNCTION_NAME(sqt_koornwinder_interp_matrix)(...)
 * @param nqk number of Koornwinder interpolation nodes
 * @param nK maximum order of Koornwinder polynomial
 * @param xte target element nodes as three packed real numbers
 * @param xtstr stride between target element nodes
 * @param nte number of target element nodes 
 * @param s local coordinates of evaluation points on \a xte
 * @param sstr stride in \a s
 * @param t local coordinates of evaluation points on \a xte
 * @param tstr stride in \a t
 * @param nt number of evaluation points on \a xte
 * @param Ast on exit contains matrix for evaluation of single and double
 * layer potentials generated by source element on target
 * 
 * @return 0 on success.
 * 
 **/

gint
SQT_FUNCTION_NAME(sqt_laplace_source_target_tri_basic)(SQT_REAL *xse,
						       gint xsstr, gint nse,
						       SQT_REAL *q, gint nq,
						       SQT_REAL *Kq,
						       gint nqk, gint nK,
						       SQT_REAL *xte,
						       gint xtstr, gint nte,
						       SQT_REAL *s,
						       gint sstr,
						       SQT_REAL *t,
						       gint tstr,
						       gint nt,
						       SQT_REAL *Ast) ;

/**
 * @ingroup helmholtz
 *
 * @brief Calculating weights for evaluation of Helmholtz potential on
 * target triangular element from source triangular element using
 * standard quadrature
 * 
 * @param k wavenumber
 * @param xse source element nodes as three packed real numbers
 * @param xsstr stride between source element nodes
 * @param nse number of source element nodes 
 * @param q nodes and weights of a triangular quadrature rule
 * @param nq number of nodes in \a q
 * @param Kq Koornwinder interpolation matrix for \a xse from 
 * SQT_FUNCTION_NAME(sqt_koornwinder_interp_matrix)(...)
 * @param nqk number of Koornwinder interpolation nodes
 * @param nK maximum order of Koornwinder polynomial
 * @param xte target element nodes as three packed real numbers
 * @param xtstr stride between target element nodes
 * @param nte number of target element nodes 
 * @param s local coordinates of evaluation points on \a xte
 * @param sstr stride in \a s
 * @param t local coordinates of evaluation points on \a xte
 * @param tstr stride in \a t
 * @param nt number of evaluation points on \a xte
 * @param Ast on exit contains matrix for evaluation of single and double
 * layer potentials generated by source element on target
 * 
 * @return 0 on success.
 * 
 **/

gint
SQT_FUNCTION_NAME(sqt_helmholtz_source_target_tri_basic)(SQT_REAL k,
						       SQT_REAL *xse,
						       gint xsstr, gint nse,
						       SQT_REAL *q, gint nq,
						       SQT_REAL *Kq,
						       gint nqk, gint nK,
						       SQT_REAL *xte,
						       gint xtstr, gint nte,
						       SQT_REAL *s,
						       gint sstr,
						       SQT_REAL *t,
						       gint tstr,
						       gint nt,
						       SQT_REAL *Ast) ;

/**
 * @ingroup laplace
 *
 * @brief Calculating weights for evaluation of Laplace potential on
 * target triangular element from source triangular element using
 * adaptive quadrature
 * 
 * @param xse source element nodes as three packed real numbers
 * @param xsstr stride between source element nodes
 * @param nse number of source element nodes 
 * @param q nodes and weights of a triangular quadrature rule
 * @param nq number of nodes in \a q
 * @param Kq Koornwinder interpolation matrix for \a xse from 
 * SQT_FUNCTION_NAME(sqt_koornwinder_interp_matrix)(...)
 * @param nqk number of Koornwinder interpolation nodes
 * @param nK maximum order of Koornwinder polynomial
 * @param tol convergence tolerance for adaptive quadrature
 * @param dmax maximum recursion depth
 * @param xte target element nodes as three packed real numbers
 * @param xtstr stride between target element nodes
 * @param nte number of target element nodes 
 * @param s local coordinates of evaluation points on \a xte
 * @param sstr stride in \a s
 * @param t local coordinates of evaluation points on \a xte
 * @param tstr stride in \a t
 * @param nt number of evaluation points on \a xte
 * @param Ast on exit contains matrix for evaluation of single and double
 * layer potentials generated by source element on target
 * 
 * @return 0 on success.
 * 
 **/

gint
SQT_FUNCTION_NAME(sqt_laplace_source_target_tri_adaptive)(SQT_REAL *xse,
							  gint xsstr, gint nse,
							  SQT_REAL *q, gint nq,
							  SQT_REAL *Kq,
							  gint nqk, gint nK,
							  SQT_REAL tol,
							  gint dmax,
							  SQT_REAL *xte,
							  gint xtstr, gint nte,
							  SQT_REAL *s,
							  gint sstr,
							  SQT_REAL *t,
							  gint tstr,
							  gint nt,
							  SQT_REAL *Ast) ;

/**
 * @ingroup laplace
 *
 * @brief Calculating weights for evaluation of Laplace potentials on
 * element defined using Koornwinder polynomials using adaptive
 * quadrature
 * 
 * @param ce interpolation coefficients for patch surface
 * @param ne number of interpolation coefficients
 * @param Nk maximum order of Koornwinder polynomial
 * @param Kq Koornwinder interpolation matrix from 
 * SQT_FUNCTION_NAME(sqt_koornwinder_interp_matrix)(...)
 * @param q quadrature rule
 * @param nq number of quadrature nodes
 * @param tol tolerance for convergence of adaptive quadrature
 * @param dmax maximum depth of adaptive quadrature
 * @param x field point
 * @param w on exit, contains weights for evaluation of Laplace potentials at 
 * \a x
 * @param work workspace
 * 
 * @return 0 on success.
 * 
 **/

gint SQT_FUNCTION_NAME(sqt_laplace_weights_kw_adaptive)(SQT_REAL *ce,
							gint ne, gint Nk,
							SQT_REAL *Kq,
							SQT_REAL *q, gint nq,
							SQT_REAL tol,
							gint dmax,
							SQT_REAL *x,
							SQT_REAL *w,
							SQT_REAL *work) ;

/**
 * @ingroup helmholtz
 *
 * @brief Calculating weights for evaluation of Helmholtz potentials on
 * element defined using Koornwinder polynomials using adaptive
 * quadrature
 * 
 * @param k wavenumber
 * @param ce interpolation coefficients for patch surface
 * @param ne number of interpolation coefficients
 * @param Nk maximum order of Koornwinder polynomial
 * @param Kq Koornwinder interpolation matrix from 
 * SQT_FUNCTION_NAME(sqt_koornwinder_interp_matrix)(...)
 * @param q quadrature rule
 * @param nq number of quadrature nodes
 * @param tol tolerance for convergence of adaptive quadrature
 * @param dmax maximum depth of adaptive quadrature
 * @param x field point
 * @param w on exit, contains weights for evaluation of Helmholtz potentials
 * at \a x
 * @param work workspace
 * 
 * @return 0 on success.
 * 
 **/

gint SQT_FUNCTION_NAME(sqt_helmholtz_weights_kw_adaptive)(SQT_REAL k,
							  SQT_REAL *ce,
							  gint ne, gint Nk,
							  SQT_REAL *Kq,
							  SQT_REAL *q, gint nq,
							  SQT_REAL tol,
							  gint dmax,
							  SQT_REAL *x,
							  SQT_REAL *w,
							  SQT_REAL *work) ;

/**
 * @ingroup laplace
 *
 * @brief Calculating weights for evaluation of self-induced Laplace
 * potential on triangular element using singular integral rules
 * 
 * @param xe element nodes as three packed real numbers
 * @param xstr stride between element nodes
 * @param ne number of element nodes 
 * @param Kq Koornwinder interpolation matrix for \a xse from 
 * SQT_FUNCTION_NAME(sqt_koornwinder_interp_matrix)(...)
 * @param nqk number of Koornwinder interpolation nodes
 * @param nK maximum order of Koornwinder polynomial
 * @param N order of integration method
 * @param s local coordinates of evaluation points on \a xe
 * @param sstr stride in \a s
 * @param t local coordinates of evaluation points on \a xe
 * @param tstr stride in \a t
 * @param nt number of evaluation points on \a xe
 * @param Ast on exit contains matrix for evaluation of single and double
 * layer potentials on element
 * 
 * @return 0 on success.
 * 
 **/

gint
SQT_FUNCTION_NAME(sqt_laplace_source_target_tri_self)(SQT_REAL *xe,
						      gint xstr, gint ne,
						      SQT_REAL *Kq,
						      gint nqk, gint nK,
						      gint N,
						      SQT_REAL *s,
						      gint sstr,
						      SQT_REAL *t,
						      gint tstr,
						      gint nt,
						      SQT_REAL *Ast) ;

/**
 * @ingroup laplace
 *
 * @brief Generate matrix for evaluation of Laplace potentials from
 * patch defined using Koornwinder polynomials using adaptive
 * quadrature
 * 
 * @param ce interpolation coefficients for patch surface
 * @param ne number of interpolation coefficients
 * @param Nk maximum order of Koornwinder polynomial
 * @param Kq Koornwinder interpolation matrix from 
 * SQT_FUNCTION_NAME(sqt_koornwinder_interp_matrix)(...)
 * @param q quadrature rule
 * @param nq number of quadrature nodes
 * @param tol tolerance for convergence of adaptive quadrature
 * @param dmax maximum depth of adaptive quadrature
 * @param x array of field points, three elements per point
 * @param xstr stride between field points
 * @param nx number of field points
 * @param Ast on exit, contains matrix for evaluation of Laplace potentials at 
 * all points in \a x
 * @param work workspace
 * 
 * @return 0 on success.
 * 
 **/

gint SQT_FUNCTION_NAME(sqt_laplace_matrix_kw_adaptive)(SQT_REAL *ce,
						       gint ne, gint Nk,
						       SQT_REAL *Kq,
						       SQT_REAL *q, gint nq,
						       SQT_REAL tol,
						       gint dmax,
						       SQT_REAL *x,
						       gint xstr, gint nx,
						       SQT_REAL *Ast,
						       SQT_REAL *work) ;



/**
 * @ingroup helmholtz
 *
 * @brief Generate matrix for evaluation of Helmholtz potentials from
 * patch defined using Koornwinder polynomials using adaptive
 * quadrature
 * 
 * @param k wavenumber
 * @param ce interpolation coefficients for patch surface
 * @param ne number of interpolation coefficients
 * @param Nk maximum order of Koornwinder polynomial
 * @param Kq Koornwinder interpolation matrix from 
 * SQT_FUNCTION_NAME(sqt_koornwinder_interp_matrix)(...)
 * @param q quadrature rule
 * @param nq number of quadrature nodes
 * @param tol tolerance for convergence of adaptive quadrature
 * @param dmax maximum depth of adaptive quadrature
 * @param x array of field points, three elements per point
 * @param xstr stride between field points
 * @param nx number of field points
 * @param Ast on exit, contains matrix for evaluation of Laplace potentials at 
 * all points in \a x
 * @param work workspace
 * 
 * @return 0 on success.
 * 
 **/

gint SQT_FUNCTION_NAME(sqt_helmholtz_matrix_kw_adaptive)(SQT_REAL k,
							 SQT_REAL *ce,
							 gint ne, gint Nk,
							 SQT_REAL *Kq,
							 SQT_REAL *q, gint nq,
							 SQT_REAL tol,
							 gint dmax,
							 SQT_REAL *x,
							 gint xstr, gint nx,
							 SQT_REAL *Ast,
							 SQT_REAL *work) ;

/**
 * @ingroup laplace
 *
 * @brief Calculating weights for evaluation of self-induced Laplace
 * potential using singular quadrature on patch defined using
 * Koornwinder interpolation.
 *
 * @param ce interpolation coefficients for patch surface
 * @param ne number of interpolation coefficients
 * @param Nk maximum order of Koornwinder polynomial
 * @param Kq Koornwinder interpolation matrix from 
 * @param N order of singular quadrature rule
 * @param s0 coordinate in local system of surface evaluation point
 * @param t0 coordinate in local system of surface evaluation point
 * @param w on exit contains weights for Laplace potential at 
 * \f$\mathbf{x}(s_{0},t_{0})\f$
 * @param work workspace
 * 
 * @return 0 on success.
 * 
 **/

gint SQT_FUNCTION_NAME(sqt_laplace_weights_kw_singular)(SQT_REAL *ce,
							gint ne, gint Nk,
							SQT_REAL *Kq,
							gint N,
							SQT_REAL s0,
							SQT_REAL t0,
							SQT_REAL *w,
							SQT_REAL *work) ;

/**
 * @ingroup helmholtz
 *
 * @brief Calculating weights for evaluation of self-induced Helmholtz
 * potential using singular quadrature on patch defined using
 * Koornwinder interpolation.
 *
 * @param k wavenumber
 * @param ce interpolation coefficients for patch surface
 * @param ne number of interpolation coefficients
 * @param Nk maximum order of Koornwinder polynomial
 * @param Kq Koornwinder interpolation matrix from 
 * @param N order of singular quadrature rule
 * @param s0 coordinate in local system of surface evaluation point
 * @param t0 coordinate in local system of surface evaluation point
 * @param w on exit contains weights for Helmholtz potential at
 * \f$\mathbf{x}(s_{0},t_{0})\f$
 * @param work workspace
 * 
 * @return 0 on success.
 * 
 **/

gint SQT_FUNCTION_NAME(sqt_helmholtz_weights_kw_singular)(SQT_REAL k,
							  SQT_REAL *ce,
							  gint ne, gint Nk,
							  SQT_REAL *Kq,
							  gint N,
							  SQT_REAL s0,
							  SQT_REAL t0,
							  SQT_REAL *w,
							  SQT_REAL *work) ;
